webpackJsonp([1,2],{128:function(e,t,n){"use strict";function r(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}Object.defineProperty(t,"__esModule",{value:!0}),t.recievePosts=t.requestPosts=t.startFetchPosts=void 0;var a=n(75),o=r(a),u=(t.startFetchPosts=function(){return function(e){e(u()),e(i([]))}},t.requestPosts=function(){return{type:o.REQUEST_POSTS}}),i=t.recievePosts=function(e){return{type:o.RECIEVE_POSTS,posts:e}}},129:function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var a=n(3),o=r(a),u=n(42),i=n(41),s=n(137),l=r(s),f=n(136),c=r(f),d=function(e){var t=e.store;return o.default.createElement(i.Provider,{store:t},o.default.createElement(u.Router,{history:u.hashHistory},o.default.createElement(u.Route,{path:"/",component:l.default},o.default.createElement(u.IndexRoute,{component:c.default}))))};d.proptTypes={store:a.PropTypes.object.isRequired},t.default=d},130:function(e,t,n){"use strict";function r(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}function a(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"view",t=arguments[1];switch(t.type){case f.CHAGE_MODE:return t.mode;default:return e}}function o(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{title:"Title",date:"Jan, 1 2017",tags:"",post:"empty post"},t=arguments[1];switch(t.type){case f.CHANGE_POST:case f.REQUEST_POST:case f.RECIEVE_POST:return i({},t.post);default:return e}}function u(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments[1];switch(t.type){case f.ADD_POST:return e;case f.REMOVE_POST:return e;case f.REQUEST_POSTS:return e;case f.RECIEVE_POSTS:return t.posts;default:return e}}Object.defineProperty(t,"__esModule",{value:!0});var i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},s=n(26),l=n(75),f=r(l);t.default=(0,s.combineReducers)({mode:a,post:o,posts:u})},132:function(e,t,n){function r(e,t,n){var r=!0,i=!0;if("function"!=typeof e)throw new TypeError(u);return o(n)&&(r="leading"in n?!!n.leading:r,i="trailing"in n?!!n.trailing:i),a(e,t,{leading:r,maxWait:t,trailing:i})}var a=n(175),o=n(51),u="Expected a function";e.exports=r},133:function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var a=n(3),o=r(a),u=n(139),i=(r(u),function(e){var t=e.title,n=e.date,r=e.tags,a=e.post,u=a.split("\n").map(function(e,t){return o.default.createElement("p",{key:t},e.trim())});return o.default.createElement("article",{className:"article-excerpt"},o.default.createElement("header",null,o.default.createElement("h3",null,t),o.default.createElement("datetime",null,n)),o.default.createElement("div",{className:"text"},u),o.default.createElement("footer",null,o.default.createElement("span",{className:"tags"},r)))});t.default=i},134:function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var a=n(3),o=r(a),u=n(140),i=(r(u),function(e){return o.default.createElement("footer",{className:"tg-footer"},"Built by Chris Sanders")});t.default=i},135:function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var a=n(3),o=r(a),u=n(141),i=(r(u),n(138)),s=r(i),l=function(e){return o.default.createElement("header",{className:"tg-header"},o.default.createElement("h1",null,"TheGayngle"),o.default.createElement(s.default,null))};t.default=l},136:function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function i(e){return 0===e.length?d.default.createElement("div",{className:styles["no-articles-message"]},"No Featured Articles Exist"):e.map(function(e,t){return d.default.createElement(y.default,f({key:t},e))})}function s(e){return 0===e.length?d.default.createElement("div",{className:styles["no-articles-message"]},"No Articles Exist"):e.map(function(e,t){return d.default.createElement(y.default,f({key:t},e))})}Object.defineProperty(t,"__esModule",{value:!0});var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),f=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},c=n(3),d=r(c),p=n(41);n(142);var m=n(133),y=r(m),v=function(e){return{posts:e.posts}},h=function(e){function t(){return a(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return u(t,e),l(t,[{key:"render",value:function(){var e=this.props.posts,t=e.filter(function(e){return"featured"===e.type}),n=e.filter(function(e){return"standard"===e.type});return d.default.createElement("main",{className:"tg-content-container"},d.default.createElement("section",{className:"content"},d.default.createElement("div",{className:"featured-articles"},i(t)),d.default.createElement("div",{className:"articles"},s(n))),d.default.createElement("aside",{className:"sidebar"}))}}]),t}(d.default.Component);t.default=(0,p.connect)(v)(h)},137:function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var a=n(3),o=r(a),u=n(143),i=(r(u),n(135)),s=r(i),l=n(134),f=r(l),c=function(e){return o.default.createElement("div",null,o.default.createElement(s.default,null),e.children,o.default.createElement(f.default,null))};t.default=c},138:function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var a=n(3),o=r(a),u=n(42),i=n(144),s=(r(i),function(e){return o.default.createElement("nav",{className:"tg-nav"},o.default.createElement(u.Link,{to:"/about"},"About"),o.default.createElement(u.Link,{to:"/contact-me"},"Contact Me"))});t.default=s},139:function(e,t){},140:function(e,t){},141:function(e,t){},142:function(e,t){},143:function(e,t){},144:function(e,t){},171:function(e,t,n){function r(e){return null==e?void 0===e?s:i:l&&l in Object(e)?o(e):u(e)}var a=n(84),o=n(173),u=n(174),i="[object Null]",s="[object Undefined]",l=a?a.toStringTag:void 0;e.exports=r},172:function(e,t,n){(function(t){var n="object"==typeof t&&t&&t.Object===Object&&t;e.exports=n}).call(t,n(40))},173:function(e,t,n){function r(e){var t=u.call(e,s),n=e[s];try{e[s]=void 0;var r=!0}catch(e){}var a=i.call(e);return r&&(t?e[s]=n:delete e[s]),a}var a=n(84),o=Object.prototype,u=o.hasOwnProperty,i=o.toString,s=a?a.toStringTag:void 0;e.exports=r},174:function(e,t){function n(e){return a.call(e)}var r=Object.prototype,a=r.toString;e.exports=n},175:function(e,t,n){function r(e,t,n){function r(t){var n=E,r=g;return E=g=void 0,w=t,_=e.apply(r,n)}function f(e){return w=e,O=setTimeout(p,t),T?r(e):_}function c(e){var n=e-P,r=e-w,a=t-n;return S?l(a,b-r):a}function d(e){var n=e-P,r=e-w;return void 0===P||n>=t||n<0||S&&r>=b}function p(){var e=o();return d(e)?m(e):void(O=setTimeout(p,c(e)))}function m(e){return O=void 0,k&&E?r(e):(E=g=void 0,_)}function y(){void 0!==O&&clearTimeout(O),w=0,E=P=g=O=void 0}function v(){return void 0===O?_:m(o())}function h(){var e=o(),n=d(e);if(E=arguments,g=this,P=e,n){if(void 0===O)return f(P);if(S)return O=setTimeout(p,t),r(P)}return void 0===O&&(O=setTimeout(p,t)),_}var E,g,b,_,O,P,w=0,T=!1,S=!1,k=!0;if("function"!=typeof e)throw new TypeError(i);return t=u(t)||0,a(n)&&(T=!!n.leading,S="maxWait"in n,b=S?s(u(n.maxWait)||0,t):b,k="trailing"in n?!!n.trailing:k),h.cancel=y,h.flush=v,h}var a=n(51),o=n(178),u=n(179),i="Expected a function",s=Math.max,l=Math.min;e.exports=r},176:function(e,t){function n(e){return null!=e&&"object"==typeof e}e.exports=n},177:function(e,t,n){function r(e){return"symbol"==typeof e||o(e)&&a(e)==u}var a=n(171),o=n(176),u="[object Symbol]";e.exports=r},178:function(e,t,n){var r=n(85),a=function(){return r.Date.now()};e.exports=a},179:function(e,t,n){function r(e){if("number"==typeof e)return e;if(o(e))return u;if(a(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=a(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(i,"");var n=l.test(e);return n||f.test(e)?c(e.slice(2),n?2:8):s.test(e)?u:+e}var a=n(51),o=n(177),u=NaN,i=/^\s+|\s+$/g,s=/^[-+]0x[0-9a-f]+$/i,l=/^0b[01]+$/i,f=/^0o[0-7]+$/i,c=parseInt;e.exports=r},288:function(e,t,n){"use strict";function r(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}function a(e){return e&&e.__esModule?e:{default:e}}var o=n(3),u=a(o),i=n(43),s=a(i),l=n(26),f=n(44),c=a(f),d=n(132),p=(a(d),n(128)),m=(r(p),n(130)),y=a(m),v=n(129),h=a(v),E={mode:"view",post:{},posts:[{type:"featured",title:"Fake Title",date:"Jan 1, 2017",tags:"stuff, stuff, stuff, stuff",post:"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."},{type:"featured",title:"Fake Title",date:"Jan 1, 2017",tags:"stuff, stuff, stuff, stuff",post:"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."},{type:"featured",title:"Fake Title",date:"Jan 1, 2017",tags:"stuff, stuff, stuff, stuff",post:"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."},{type:"standard",title:"Fake Title",date:"Jan 1, 2017",tags:"stuff, stuff, stuff, stuff",post:"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.\n      It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\n      It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum."},{type:"standard",title:"Fake Title",date:"Jan 1, 2017",tags:"stuff, stuff, stuff, stuff",post:"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum."}]},g=(0,l.createStore)(y.default,E,(0,l.compose)((0,l.applyMiddleware)(c.default),window.devToolsExtension?window.devToolsExtension():function(e){return e}));s.default.render(u.default.createElement(h.default,{store:g}),document.getElementById("root"))},51:function(e,t){function n(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}e.exports=n},75:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.CHANGE_MODE="CHANGE_MODE",t.ADD_POST="ADD_POST",t.REMOVE_POST="REMOVE_POST",t.CHANGE_POST="CHANGE_POST",t.REQUEST_POST="REQUEST_POST",t.RECIEVE_POST="RECIEVE_POST",t.REQUEST_POSTS="REQUEST_POSTS",t.RECIEVE_POSTS="RECIEVE_POSTS"},84:function(e,t,n){var r=n(85),a=r.Symbol;e.exports=a},85:function(e,t,n){var r=n(172),a="object"==typeof self&&self&&self.Object===Object&&self,o=r||a||Function("return this")();e.exports=o}},[288]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,